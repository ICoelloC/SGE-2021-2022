Index: Python/06_POO/01_GeneradorPass/password.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import choice\r\n\r\nclass Pass():\r\n    def __init__(self, long=8):\r\n        self.longitud = long\r\n        self.generador_pass()\r\n\r\n    @property\r\n    def longitud(self):\r\n        return self.__longitud\r\n\r\n    @longitud.setter\r\n    def longitud(self, long):\r\n        if long>0:\r\n            self.__longitud = long\r\n        else:\r\n            self.__longitud = 8\r\n            raise ValueError(\"La longitud tiene que ser positiva mayor que cero\")\r\n\r\n\r\n    @property\r\n    def valor(self):\r\n        return self.__valor\r\n\r\n    def __str__(self):\r\n        clase = type(self).__name__\r\n        msg = \"{0} de longitud {1} y valor {2}\"\r\n        msg += \" es fuerte\" if self.es_fuerte() else \" es débil\"\r\n        return msg.format(clase, self.longitud, self.valor)\r\n\r\n    def generador_pass(self):\r\n        valores = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<=>@#%&+\"\r\n        self.__valor = \"\";\r\n        for _ in range(self.longitud):\r\n            self.__valor += choice(valores)\r\n\r\n    def es_fuerte(self):\r\n        \"\"\"Será fuerte si tiene más 2 mayúsculas, más 1 minúscula y más de 5 números\"\"\"\r\n        if len(self.__valor) < 8:\r\n            return False\r\n        mins = \"abcdefghijklmnñopqrstuvwxyz\"\r\n        mays = \"ABCDEFGHIJKLMNÑOPQRSTUVWXYZ\"\r\n        num = \"0123456789\"\r\n        nmins, nmays, nnums = 0, 0, 0\r\n        for a in self.__valor:\r\n            if a in mins:\r\n                nmins += 1\r\n            elif a in mays:\r\n                nmays += 1\r\n            elif a in num:\r\n                nnums += 1\r\n        return nmays > 2 and nmins > 1 and nnums > 5\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Python/06_POO/01_GeneradorPass/password.py b/Python/06_POO/01_GeneradorPass/password.py
--- a/Python/06_POO/01_GeneradorPass/password.py	(revision d936a8f3cd766ba7895f09d381a9b2a0c57a90d6)
+++ b/Python/06_POO/01_GeneradorPass/password.py	(date 1638285355529)
@@ -1,5 +1,6 @@
 from random import choice
 
+
 class Pass():
     def __init__(self, long=8):
         self.longitud = long
@@ -11,13 +12,12 @@
 
     @longitud.setter
     def longitud(self, long):
-        if long>0:
+        if long > 0:
             self.__longitud = long
         else:
             self.__longitud = 8
             raise ValueError("La longitud tiene que ser positiva mayor que cero")
 
-
     @property
     def valor(self):
         return self.__valor
@@ -50,7 +50,3 @@
             elif a in num:
                 nnums += 1
         return nmays > 2 and nmins > 1 and nnums > 5
-
-
-
-
Index: Python/06_POO/01_GeneradorPass/utilidades.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from password import Pass\r\n\r\ndef pedir_entero(msg):\r\n    valorcorrecto = False\r\n    npassword = 0\r\n    while not valorcorrecto:\r\n        try:\r\n            npassword = input(msg)\r\n            npassword = int(npassword)\r\n            valorcorrecto = True\r\n        except ValueError:\r\n            print(\"La longitud debe ser un entero\")\r\n    return npassword\r\n\r\n\r\ndef generar_passwords():\r\n    npassword = pedir_entero(\"Introduce el número de password que deseas generar: \")\r\n\r\n    listapassword = []\r\n    long = -1\r\n    msg = \"Longitud de la contraseña {0} (-1 para longitud por defecto): \"\r\n    for i in range(npassword):\r\n        valorcorrecto = False\r\n        while not valorcorrecto:\r\n            long = input(msg.format(str(i)))\r\n            try:\r\n                long = int(long)\r\n                valorcorrecto = True\r\n            except ValueError:\r\n                print(\"La longitud debe ser un entero\")\r\n        if long == -1:\r\n            listapassword.append(Pass())\r\n        else:\r\n            listapassword.append(Pass(long))\r\n    return listapassword\r\n\r\n\r\ndef mostrar_lista_pass(lista_pass):\r\n    for p in lista_pass:\r\n        print(p)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Python/06_POO/01_GeneradorPass/utilidades.py b/Python/06_POO/01_GeneradorPass/utilidades.py
--- a/Python/06_POO/01_GeneradorPass/utilidades.py	(revision d936a8f3cd766ba7895f09d381a9b2a0c57a90d6)
+++ b/Python/06_POO/01_GeneradorPass/utilidades.py	(date 1638285160644)
@@ -1,40 +1,40 @@
 from password import Pass
 
+
 def pedir_entero(msg):
-    valorcorrecto = False
-    npassword = 0
-    while not valorcorrecto:
+    valor_correcto = False
+    numero = 0
+    while not valor_correcto:
         try:
-            npassword = input(msg)
-            npassword = int(npassword)
-            valorcorrecto = True
+            numero = input(msg)
+            numero = int(numero)
+            valor_correcto = True
         except ValueError:
             print("La longitud debe ser un entero")
-    return npassword
+    return numero
 
 
 def generar_passwords():
-    npassword = pedir_entero("Introduce el número de password que deseas generar: ")
-
-    listapassword = []
+    num_pass = pedir_entero("Introduce el número de password que deseas generar: ")
+    lista_pass = []
     long = -1
     msg = "Longitud de la contraseña {0} (-1 para longitud por defecto): "
-    for i in range(npassword):
-        valorcorrecto = False
-        while not valorcorrecto:
+    for i in range(num_pass):
+        valido = False
+        while not valido:
             long = input(msg.format(str(i)))
             try:
                 long = int(long)
-                valorcorrecto = True
+                valido = True
             except ValueError:
                 print("La longitud debe ser un entero")
         if long == -1:
-            listapassword.append(Pass())
+            lista_pass.append(Pass())
         else:
-            listapassword.append(Pass(long))
-    return listapassword
+            lista_pass.append(Pass(long))
+    return lista_pass
 
 
 def mostrar_lista_pass(lista_pass):
     for p in lista_pass:
-        print(p)
\ No newline at end of file
+        print(p)
Index: Python/05_ProgramacionEstructuradaModular/01_Alumnos/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import utilidades as ut\r\n\r\n\r\ndef menu_principal():\r\n    salir = False\r\n    dicc = {}\r\n    while not salir:\r\n        print(\"\"\"\r\n        1. Añadir nuevo alumno\r\n        2. Mostrar lista de alumnos\r\n        3. Buscar alumno\r\n        4. Borrar alumno\r\n        5. Salir\r\n        \"\"\")\r\n        opcion = ut.pedir_entero(\"Elige una opción: \")\r\n\r\n        if opcion == 1:\r\n            alumno = ut.pedir_datos_alumno()\r\n            dicc = alumno.to_dictionary(dicc)\r\n\r\n        elif opcion == 2:\r\n            ut.mostrar_alumnos(dicc)\r\n\r\n        elif opcion == 3:\r\n            \"\"\" dni = input(\"Introduce el DNI del alumno: \")\r\n            alumno = ut.buscar_alumno(dicc, dni = dni) \"\"\"\r\n            alumno = ut.buscar(dicc)\r\n            if alumno:\r\n                print(alumno)\r\n            else:\r\n                print(\"Alumno no encontrado\")\r\n\r\n        elif opcion == 4:\r\n            dni = input(\"Introduce el DNI del alumno: \")\r\n            ut.borrar_alumno(dicc, dni)\r\n\r\n        elif opcion == 5:\r\n            salir = True\r\n\r\n        else:\r\n            print(\"Opción incorrecta\")\r\n\r\nmenu_principal()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Python/05_ProgramacionEstructuradaModular/01_Alumnos/main.py b/Python/05_ProgramacionEstructuradaModular/01_Alumnos/main.py
--- a/Python/05_ProgramacionEstructuradaModular/01_Alumnos/main.py	(revision d936a8f3cd766ba7895f09d381a9b2a0c57a90d6)
+++ b/Python/05_ProgramacionEstructuradaModular/01_Alumnos/main.py	(date 1638285355513)
@@ -22,8 +22,6 @@
             ut.mostrar_alumnos(dicc)
 
         elif opcion == 3:
-            """ dni = input("Introduce el DNI del alumno: ")
-            alumno = ut.buscar_alumno(dicc, dni = dni) """
             alumno = ut.buscar(dicc)
             if alumno:
                 print(alumno)
@@ -40,4 +38,5 @@
         else:
             print("Opción incorrecta")
 
+
 menu_principal()
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
new file mode 100644
